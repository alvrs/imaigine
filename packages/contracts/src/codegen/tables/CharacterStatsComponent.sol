// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";

bytes32 constant _tableId = bytes32(abi.encodePacked(bytes16(""), bytes16("CharacterStatsCo")));
bytes32 constant CharacterStatsComponentTableId = _tableId;

struct CharacterStatsComponentData {
  int32 dexterity;
  int32 strength;
  int32 constitution;
  int32 intelligence;
  int32 charisma;
  int32 wisdom;
}

library CharacterStatsComponent {
  /** Get the table's schema */
  function getSchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](6);
    _schema[0] = SchemaType.INT32;
    _schema[1] = SchemaType.INT32;
    _schema[2] = SchemaType.INT32;
    _schema[3] = SchemaType.INT32;
    _schema[4] = SchemaType.INT32;
    _schema[5] = SchemaType.INT32;

    return SchemaLib.encode(_schema);
  }

  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](1);
    _schema[0] = SchemaType.BYTES32;

    return SchemaLib.encode(_schema);
  }

  /** Get the table's metadata */
  function getMetadata() internal pure returns (string memory, string[] memory) {
    string[] memory _fieldNames = new string[](6);
    _fieldNames[0] = "dexterity";
    _fieldNames[1] = "strength";
    _fieldNames[2] = "constitution";
    _fieldNames[3] = "intelligence";
    _fieldNames[4] = "charisma";
    _fieldNames[5] = "wisdom";
    return ("CharacterStatsComponent", _fieldNames);
  }

  /** Register the table's schema */
  function registerSchema() internal {
    StoreSwitch.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Register the table's schema (using the specified store) */
  function registerSchema(IStore _store) internal {
    _store.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Set the table's metadata */
  function setMetadata() internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    StoreSwitch.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Set the table's metadata (using the specified store) */
  function setMetadata(IStore _store) internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    _store.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Get dexterity */
  function getDexterity(bytes32 key) internal view returns (int32 dexterity) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 0);
    return (int32(uint32(Bytes.slice4(_blob, 0))));
  }

  /** Get dexterity (using the specified store) */
  function getDexterity(IStore _store, bytes32 key) internal view returns (int32 dexterity) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 0);
    return (int32(uint32(Bytes.slice4(_blob, 0))));
  }

  /** Set dexterity */
  function setDexterity(bytes32 key, int32 dexterity) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    StoreSwitch.setField(_tableId, _keyTuple, 0, abi.encodePacked((dexterity)));
  }

  /** Set dexterity (using the specified store) */
  function setDexterity(IStore _store, bytes32 key, int32 dexterity) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    _store.setField(_tableId, _keyTuple, 0, abi.encodePacked((dexterity)));
  }

  /** Get strength */
  function getStrength(bytes32 key) internal view returns (int32 strength) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 1);
    return (int32(uint32(Bytes.slice4(_blob, 0))));
  }

  /** Get strength (using the specified store) */
  function getStrength(IStore _store, bytes32 key) internal view returns (int32 strength) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 1);
    return (int32(uint32(Bytes.slice4(_blob, 0))));
  }

  /** Set strength */
  function setStrength(bytes32 key, int32 strength) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    StoreSwitch.setField(_tableId, _keyTuple, 1, abi.encodePacked((strength)));
  }

  /** Set strength (using the specified store) */
  function setStrength(IStore _store, bytes32 key, int32 strength) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    _store.setField(_tableId, _keyTuple, 1, abi.encodePacked((strength)));
  }

  /** Get constitution */
  function getConstitution(bytes32 key) internal view returns (int32 constitution) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 2);
    return (int32(uint32(Bytes.slice4(_blob, 0))));
  }

  /** Get constitution (using the specified store) */
  function getConstitution(IStore _store, bytes32 key) internal view returns (int32 constitution) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 2);
    return (int32(uint32(Bytes.slice4(_blob, 0))));
  }

  /** Set constitution */
  function setConstitution(bytes32 key, int32 constitution) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    StoreSwitch.setField(_tableId, _keyTuple, 2, abi.encodePacked((constitution)));
  }

  /** Set constitution (using the specified store) */
  function setConstitution(IStore _store, bytes32 key, int32 constitution) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    _store.setField(_tableId, _keyTuple, 2, abi.encodePacked((constitution)));
  }

  /** Get intelligence */
  function getIntelligence(bytes32 key) internal view returns (int32 intelligence) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 3);
    return (int32(uint32(Bytes.slice4(_blob, 0))));
  }

  /** Get intelligence (using the specified store) */
  function getIntelligence(IStore _store, bytes32 key) internal view returns (int32 intelligence) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 3);
    return (int32(uint32(Bytes.slice4(_blob, 0))));
  }

  /** Set intelligence */
  function setIntelligence(bytes32 key, int32 intelligence) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    StoreSwitch.setField(_tableId, _keyTuple, 3, abi.encodePacked((intelligence)));
  }

  /** Set intelligence (using the specified store) */
  function setIntelligence(IStore _store, bytes32 key, int32 intelligence) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    _store.setField(_tableId, _keyTuple, 3, abi.encodePacked((intelligence)));
  }

  /** Get charisma */
  function getCharisma(bytes32 key) internal view returns (int32 charisma) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 4);
    return (int32(uint32(Bytes.slice4(_blob, 0))));
  }

  /** Get charisma (using the specified store) */
  function getCharisma(IStore _store, bytes32 key) internal view returns (int32 charisma) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 4);
    return (int32(uint32(Bytes.slice4(_blob, 0))));
  }

  /** Set charisma */
  function setCharisma(bytes32 key, int32 charisma) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    StoreSwitch.setField(_tableId, _keyTuple, 4, abi.encodePacked((charisma)));
  }

  /** Set charisma (using the specified store) */
  function setCharisma(IStore _store, bytes32 key, int32 charisma) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    _store.setField(_tableId, _keyTuple, 4, abi.encodePacked((charisma)));
  }

  /** Get wisdom */
  function getWisdom(bytes32 key) internal view returns (int32 wisdom) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 5);
    return (int32(uint32(Bytes.slice4(_blob, 0))));
  }

  /** Get wisdom (using the specified store) */
  function getWisdom(IStore _store, bytes32 key) internal view returns (int32 wisdom) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 5);
    return (int32(uint32(Bytes.slice4(_blob, 0))));
  }

  /** Set wisdom */
  function setWisdom(bytes32 key, int32 wisdom) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    StoreSwitch.setField(_tableId, _keyTuple, 5, abi.encodePacked((wisdom)));
  }

  /** Set wisdom (using the specified store) */
  function setWisdom(IStore _store, bytes32 key, int32 wisdom) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    _store.setField(_tableId, _keyTuple, 5, abi.encodePacked((wisdom)));
  }

  /** Get the full data */
  function get(bytes32 key) internal view returns (CharacterStatsComponentData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = StoreSwitch.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Get the full data (using the specified store) */
  function get(IStore _store, bytes32 key) internal view returns (CharacterStatsComponentData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = _store.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Set the full data using individual values */
  function set(
    bytes32 key,
    int32 dexterity,
    int32 strength,
    int32 constitution,
    int32 intelligence,
    int32 charisma,
    int32 wisdom
  ) internal {
    bytes memory _data = encode(dexterity, strength, constitution, intelligence, charisma, wisdom);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    StoreSwitch.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using individual values (using the specified store) */
  function set(
    IStore _store,
    bytes32 key,
    int32 dexterity,
    int32 strength,
    int32 constitution,
    int32 intelligence,
    int32 charisma,
    int32 wisdom
  ) internal {
    bytes memory _data = encode(dexterity, strength, constitution, intelligence, charisma, wisdom);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    _store.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using the data struct */
  function set(bytes32 key, CharacterStatsComponentData memory _table) internal {
    set(
      key,
      _table.dexterity,
      _table.strength,
      _table.constitution,
      _table.intelligence,
      _table.charisma,
      _table.wisdom
    );
  }

  /** Set the full data using the data struct (using the specified store) */
  function set(IStore _store, bytes32 key, CharacterStatsComponentData memory _table) internal {
    set(
      _store,
      key,
      _table.dexterity,
      _table.strength,
      _table.constitution,
      _table.intelligence,
      _table.charisma,
      _table.wisdom
    );
  }

  /** Decode the tightly packed blob using this table's schema */
  function decode(bytes memory _blob) internal pure returns (CharacterStatsComponentData memory _table) {
    _table.dexterity = (int32(uint32(Bytes.slice4(_blob, 0))));

    _table.strength = (int32(uint32(Bytes.slice4(_blob, 4))));

    _table.constitution = (int32(uint32(Bytes.slice4(_blob, 8))));

    _table.intelligence = (int32(uint32(Bytes.slice4(_blob, 12))));

    _table.charisma = (int32(uint32(Bytes.slice4(_blob, 16))));

    _table.wisdom = (int32(uint32(Bytes.slice4(_blob, 20))));
  }

  /** Tightly pack full data using this table's schema */
  function encode(
    int32 dexterity,
    int32 strength,
    int32 constitution,
    int32 intelligence,
    int32 charisma,
    int32 wisdom
  ) internal view returns (bytes memory) {
    return abi.encodePacked(dexterity, strength, constitution, intelligence, charisma, wisdom);
  }

  /** Encode keys as a bytes32 array using this table's schema */
  function encodeKeyTuple(bytes32 key) internal pure returns (bytes32[] memory _keyTuple) {
    _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));
  }

  /* Delete all data for given keys */
  function deleteRecord(bytes32 key) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /* Delete all data for given keys (using the specified store) */
  function deleteRecord(IStore _store, bytes32 key) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    _store.deleteRecord(_tableId, _keyTuple);
  }
}
